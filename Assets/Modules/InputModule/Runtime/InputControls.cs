//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Modules.InputModule.Runtime
{
    public partial class @InputControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Building"",
            ""id"": ""cdcc973e-e498-4fe7-8fcc-5e9db6afaba0"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""3f3176ef-f83b-48e8-b4bf-5d1c629186a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""cf7eaed7-3c6a-44da-92fc-ca719c11bc33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ea712656-1d63-43d2-bf0e-c416a81449b7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29ef675a-57b0-4653-b648-7c05a79acc0e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DefaultScheme"",
            ""bindingGroup"": ""DefaultScheme"",
            ""devices"": []
        }
    ]
}");
            // Building
            m_Building = asset.FindActionMap("Building", throwIfNotFound: true);
            m_Building_MousePosition = m_Building.FindAction("MousePosition", throwIfNotFound: true);
            m_Building_MouseClick = m_Building.FindAction("MouseClick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Building
        private readonly InputActionMap m_Building;
        private List<IBuildingActions> m_BuildingActionsCallbackInterfaces = new List<IBuildingActions>();
        private readonly InputAction m_Building_MousePosition;
        private readonly InputAction m_Building_MouseClick;
        public struct BuildingActions
        {
            private @InputControls m_Wrapper;
            public BuildingActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MousePosition => m_Wrapper.m_Building_MousePosition;
            public InputAction @MouseClick => m_Wrapper.m_Building_MouseClick;
            public InputActionMap Get() { return m_Wrapper.m_Building; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
            public void AddCallbacks(IBuildingActions instance)
            {
                if (instance == null || m_Wrapper.m_BuildingActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BuildingActionsCallbackInterfaces.Add(instance);
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
            }

            private void UnregisterCallbacks(IBuildingActions instance)
            {
                @MousePosition.started -= instance.OnMousePosition;
                @MousePosition.performed -= instance.OnMousePosition;
                @MousePosition.canceled -= instance.OnMousePosition;
                @MouseClick.started -= instance.OnMouseClick;
                @MouseClick.performed -= instance.OnMouseClick;
                @MouseClick.canceled -= instance.OnMouseClick;
            }

            public void RemoveCallbacks(IBuildingActions instance)
            {
                if (m_Wrapper.m_BuildingActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBuildingActions instance)
            {
                foreach (var item in m_Wrapper.m_BuildingActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BuildingActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BuildingActions @Building => new BuildingActions(this);
        private int m_DefaultSchemeSchemeIndex = -1;
        public InputControlScheme DefaultSchemeScheme
        {
            get
            {
                if (m_DefaultSchemeSchemeIndex == -1) m_DefaultSchemeSchemeIndex = asset.FindControlSchemeIndex("DefaultScheme");
                return asset.controlSchemes[m_DefaultSchemeSchemeIndex];
            }
        }
        public interface IBuildingActions
        {
            void OnMousePosition(InputAction.CallbackContext context);
            void OnMouseClick(InputAction.CallbackContext context);
        }
    }
}
